{% extends 'layout/base.html.twig' %}
{% block content %}
<div class="page-title text-center fw-bold">{{ "app.professional.service.new"|trans }}</div>
    {% form_theme form_service 'bootstrap_5_layout.html.twig' %}
    {{ form_start(form_service) }}
        {{ form_row(form_service.category) }}
        {{ form_row(form_service.languages) }}
        {{ form_row(form_service.specialization) }}
        {{ form_row(form_service.description) }}
        <div id="address-container">
            {{ form_label(form_service.address) }}
            {{ form_widget(form_service.address) }}
        </div>
            {{ form_row(form_service.addressDetails) }}
            {{ form_row(form_service.price) }}
    {{ form_end(form_service) }}
{% endblock %}

{% block js %}
    <script>
        function addressAutocomplete(containerElement, inputElement) {
            let isChild = false
            containerElement.childNodes.forEach(
                element => {
                    if (element.id === "service_address") {
                        isChild = true
                    }
                }
            )
            if (!isChild) {
                return false
            }
            /* Active request promise reject function. To be able to cancel the promise when a new request comes */
            let currentPromiseReject;

            function findAddress() {
                closeDropDownList();
                let currentValue = this.value;
                // Cancel previous request promise
                if (currentPromiseReject) {
                    currentPromiseReject({
                        canceled: true
                    });
                }
                if (!currentValue) {
                    return false;
                }
                /* Current autocomplete items data (GeoJSON.Feature) */
                let currentItems;

                /* Create a new promise and send geocoding request */
                let promise = new Promise((resolve, reject) => {
                    currentPromiseReject = reject;
                    const apiKey = "713805a371d74ea29e7664a7a1316fc4";
                    const url = `https://api.geoapify.com/v1/geocode/autocomplete?text=${encodeURIComponent(currentValue)}&limit=5&filter=fr&apiKey=${apiKey}`;
                    fetch(url)
                        .then(response => {
                            // check if the call was successful
                            if (response.ok) {
                                response.json().then(data => resolve(data));
                            } else {
                                response.json().then(data => reject(data));
                            }
                        });
                });
                promise.then((data) => {
                    currentItems = data.features;

                    /*create a DIV element that will contain the items (values):*/
                    let autocompleteItemsElement = document.createElement("div");
                    autocompleteItemsElement.setAttribute("id", "address-autocomplete-items");
                    containerElement.appendChild(autocompleteItemsElement);

                    /* For each item in the results */
                   currentItems.forEach((feature) => {
                        /* Create a DIV element for each element: */
                        let itemElement = document.createElement("div");
                        /* Set formatted address as item value */
                        itemElement.innerHTML = feature.properties.formatted;
                        autocompleteItemsElement.appendChild(itemElement);
                       itemElement.addEventListener('click', () => {
                           this.value = itemElement.innerHTML
                           closeDropDownList()
                       })
                    });
                }, (err) => {
                    if (!err.canceled) {
                        console.log(err);
                    }
                });
            }

            function closeDropDownList() {
                const autocompleteItemsElement = containerElement.querySelector("#address-autocomplete-items");
                if (autocompleteItemsElement) {
                    containerElement.removeChild(autocompleteItemsElement);
                }
            }

            inputElement.addEventListener("input", findAddress);
            inputElement.addEventListener("keydown", findAddress);
        }

        const addressContainer = document.getElementById("address-container")
        const addressInput = document.getElementById("service_address")
        addressAutocomplete(addressContainer, addressInput);
    </script>
{% endblock %}
