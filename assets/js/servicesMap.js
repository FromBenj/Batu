import mapPin from '../icons/map-pin.svg';
import mapPinCurrentLocation from '../icons/map-pin-current-location.svg'


export function servicesMap() {
    if(!document.getElementById('services-map')) {
        return false;
    }

    const services = categoryServices;

    let initialView = [46, 2];
    if (services[0].geometry.coordinates[0] && services[0].geometry.coordinates[1]) {
        initialView = [services[0].geometry.coordinates[0], services[0].geometry.coordinates[1]]
    }
    // Leaflet has native support for raster maps, So you can create a map with a few commands only!
    // The Leaflet map Object
    const map = L.map('services-map').setView(initialView, 6);

    // The API Key provided is restricted to JSFiddle website
    // Get your own API Key on https://myprojects.geoapify.com
    const myAPIKey = geoapifyApiKey;
    // Retina displays require different mat tiles quality
    const isRetina = L.Browser.retina;

    const baseUrl = "https://maps.geoapify.com/v1/tile/osm-bright/{z}/{x}/{y}.png?apiKey={apiKey}";
    const retinaUrl = "https://maps.geoapify.com/v1/tile/osm-bright/{z}/{x}/{y}@2x.png?apiKey={apiKey}";

    // Add map tiles layer. Set 20 as the maximal zoom and provide map data attribution.
    L.tileLayer(isRetina ? retinaUrl : baseUrl, {
        apiKey: myAPIKey,
        maxZoom: 20,
        id: 'osm-bright',
    }).addTo(map);

    //add a marker with icon generated by Geoapify Marker Icon API
    const markerIcon = L.icon({
        iconUrl: mapPin,
        iconSize: [31, 46], // size of the icon
        iconAnchor: [15.5, 42], // point of the icon which will correspond to marker's location
        popupAnchor: [0, -45] // point from which the popup should open relative to the iconAnchor
    });

    const markerCurrentPositionIcon = L.icon({
        iconUrl: mapPinCurrentLocation,
        iconSize: [31, 46], // size of the icon
        iconAnchor: [15.5, 42], // point of the icon which will correspond to marker's location
        popupAnchor: [0, -45] // point from which the popup should open relative to the iconAnchor
    });


    const title = document.getElementById('service-title');
    const specialization = document.getElementById('service-specialization');
    const description = document.getElementById('service-description');
    const professional = document.getElementById('service-professional');
    const priceType = document.getElementById('service-price-type');
    const price = document.getElementById('service-price');
    const address = document.getElementById('service-address');
    const addressDetails = document.getElementById('service-address-details');


    for (let i = 0; i < services.length; i++) {
        let markerPopup = L.popup().setContent(services[i].properties.title);
        let marker = L.marker([services[i].geometry.coordinates[0], services[i].geometry.coordinates[1]], {
            icon: markerIcon
        }).bindPopup(markerPopup).addTo(map);
        marker.on("click", () => {
            title.innerHTML = services[i].properties.title
            specialization.innerHTML = services[i].properties.specialization
            description.innerHTML = "<strong>Description:</strong> " + services[i].properties.description
            professional.innerHTML = "<strong>Proposed by:</strong> " + services[i].properties.professional
            priceType.innerHTML = "<strong>Price type:</strong> " + services[i].properties.priceType
            price.innerHTML = services[i].properties.price
            address.innerHTML = "<strong>Address:</strong> " + services[i].properties.address
            addressDetails.innerHTML = "<strong>Address details:</strong> " + services[i].properties.addressDetails
        })
    }
    const currentLocation = document.getElementById("current-location")
    currentLocation.addEventListener("click", () => {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition((position) => {
                let marker = L.marker([position.coords.latitude, position.coords.longitude], {
                    icon: markerCurrentPositionIcon
                }).addTo(map);
                map.flyTo([position.coords.latitude, position.coords.longitude],15, true);
        })} else {
            alert("Geolocation is not supported by this browser.");
        }
    })
}
